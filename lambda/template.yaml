AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  lambda

  Sample SAM Template for lambda

Globals:
  Function:
    Timeout: 15
    Runtime: nodejs20.x
    MemorySize: 256
  Api:
    Cors:
      AllowMethods: "'GET,POST,DELETE'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

# Parameters:
#   CognitoUserPoolArn:
#     Type: String
#     Description: ARN of the Cognito User Pool

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            # UserPoolArn: !Ref CognitoUserPoolArn
            UserPoolArn: !ImportValue CognitoUserPoolArn
            IdentitySource: method.request.header.Authorization
            AuthorizationScopes:
              - openid
              - email
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: execute-api:Invoke
              Resource: execute-api:/*
              Condition:
                IpAddress:
                  aws:SourceIp: '13.114.22.14/32'
            - Effect: Deny
              Principal: '*'
              Action: execute-api:Invoke
              Resource: execute-api:/*
              Condition:
                NotIpAddress:
                  aws:SourceIp: '13.114.22.14/32'

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdaFunction/
      Handler: app.lambdaHandler
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref ApiGatewayApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - app.ts
